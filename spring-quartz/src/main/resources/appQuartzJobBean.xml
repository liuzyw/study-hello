<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd">


  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="order" value="1"/>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
    <property name="locations">
      <list>
        <value>classpath:jdbc.properties</value>
        <!--<value>classpath:quartz.properties</value>-->
      </list>
    </property>
  </bean>

  <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" id="dataSource">
    <!-- 配置连接池属性 -->
    <property name="driverClass" value="${jdbc.driver}"/>
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <property name="user" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- c3p0连接池的私有属性 -->
    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
    <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间,Default: 3 -->
    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
    <!-- 关闭连接后不自动commit -->
    <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>
    <!-- 获取连接超时时间 -->
    <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
    <!-- 当获取连接失败重试次数 -->
    <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
  </bean>

  <!-- 为普通类配置定时任务 -->
  <!-- 实例化bean -->
  <bean class="com.study.spring.quartz.pojob.QuartzJobBeanTest" id="testMethodQuartz"/>

  <!-- 配置 JobDetailFactoryBean -->
  <bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean" id="testTaskMethod">

    <property name="jobClass" value="com.study.spring.quartz.pojob.QuartzJobBeanTest"/>
    <property name="jobDataAsMap">

      <map>
        <!-- 非spring管理的service放到这里，就可以注入进去 -->
        <description>jobDataAsMap</description>
        <!-- key 属性值，value 对应的bean -->
        <entry key="uploader" value="testupload"/>
      </map>
    </property>

    <property name="durability" value="true"/>

  </bean>

  <!-- 配置定时表达式 -->
  <bean class="org.springframework.scheduling.quartz.CronTriggerFactoryBean" id="testTaskTrigger">
    <property name="jobDetail" ref="testTaskMethod"/>
    <property name="cronExpression" value="0/5 * * * * ?"/>
  </bean>

  <!-- 配置调度工厂 -->
  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" id="schedulerBeanFactory">
    <!-- 注入数据源，包含任务执行表 -->
    <property name="dataSource" ref="dataSource"/>
    <property name="triggers">
      <list>
        <ref bean="testTaskTrigger"/>
      </list>
    </property>
    <!--applicationContextSchedulerContextKey：
        把spring上下文以key/value的方式存放在了quartz的上下文中了，
        可以用applicationContextSchedulerContextKey所定义的key得到对应的spring上下文-->
    <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
    <!-- 读取配置文件 -->
    <property name="configLocation" value="classpath:quartz.properties"/>
    <property name="autoStartup" value="true"/>
  </bean>


</beans>
