<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

  <bean id="receipt_1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc.url.receipt_1}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!--         <property name="driverClass" value="${jdbc_driver0}" /> -->
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="0" />
    <!-- 连接池最大使用连接数量 -->
    <property name="maxActive" value="20" />
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="0" />
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="60000" />
    <property name="validationQuery" value="SELECT 'x'" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />
    <property name="testWhileIdle" value="true" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="25200000" />
    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandoned" value="true" />
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="1800" />
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="logAbandoned" value="true" />
    <property name="filters" value="stat" />
  </bean>

  <bean id="receipt_2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${jdbc.url.receipt_2}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!--         <property name="driverClass" value="${jdbc_driver1}" /> -->
    <!-- 初始化连接大小 -->
    <property name="initialSize" value="0" />
    <!-- 连接池最大使用连接数量 -->
    <property name="maxActive" value="20" />
    <!-- 连接池最小空闲 -->
    <property name="minIdle" value="0" />
    <!-- 获取连接最大等待时间 -->
    <property name="maxWait" value="60000" />
    <property name="validationQuery" value="SELECT 'x'" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />
    <property name="testWhileIdle" value="true" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="25200000" />
    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandoned" value="true" />
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="1800" />
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="logAbandoned" value="true" />
    <property name="filters" value="stat" />
  </bean>

  <!-- 配置好dataSourceRulue,即对数据源进行管理 -->
  <bean id="dataSourceRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule">
    <constructor-arg>
      <map>
        <entry key="receipt_1" value-ref="receipt_1"/>
        <entry key="receipt_2" value-ref="receipt_2"/>
      </map>
    </constructor-arg>
  </bean>


  <bean id="shardingRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule">
    <constructor-arg index="0" ref="dataSourceRule"/>
    <constructor-arg index="1">
      <list>
        <ref bean="receiptTableRule"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="shardingDataSource" class="com.dangdang.ddframe.rdb.sharding.api.ShardingDataSource">
    <constructor-arg ref="shardingRule"/>
  </bean>



  <!-- 配置sqlSessionFactory -->
  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
    <property name="dataSource" ref="shardingDataSource"/>
    <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
    <property name="configLocation" value="classpath:mapper/mybatis-config.xml"/>
    <!-- 以下配置可以配载 config中 -->
    <!-- 扫描entity包 使用别名 -->
    <!--<property name="typeAliasesPackage" value="com.study.spring.entity"/>-->
    <!-- 自动扫描mapping.xml文件 -->
    <!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>-->
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 可使用逗号分隔，或者分号 -->
    <property name="basePackage" value="com.study.database.table.mapper"/>
    <!-- 这里指定了注解，只有是这个注解类，才会被扫描 -->
    <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>



  <!-- user_id 分库策略 -->
  <bean id="receiptDatabaseShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy">
    <constructor-arg index="0" value="user_id"/>
    <constructor-arg index="1">
      <bean class="com.study.database.table.shardingjdbc.ReceiptSingleKeyDatabaseShardingAlgorithm" />
    </constructor-arg>
  </bean>

  <!-- receipt_id 分表策略 -->
  <bean id="receiptTableShardingStrategy" class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy">
    <constructor-arg index="0" value="receipt_id"/>
    <constructor-arg index="1">
      <bean class="com.study.database.table.shardingjdbc.ReceiptSingleKeyTableShardingAlgorithm" />
    </constructor-arg>
  </bean>

  <!-- 对 receipt 表的配置，进行分库配置，逻辑表名为 receipt，每个库有实际的三张表 -->
  <bean id="receiptTableRule" class="com.dangdang.ddframe.rdb.sharding.api.rule.TableRule">
    <constructor-arg value="receipt" index="0"/>
    <constructor-arg index="2">
      <list>
        <value>receipt_1</value>
        <value>receipt_2</value>
      </list>
    </constructor-arg>
    <constructor-arg index="3" ref="dataSourceRule"/>
    <constructor-arg index="5" ref="receiptDatabaseShardingStrategy"/>
    <constructor-arg index="6" ref="receiptTableShardingStrategy"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    id="transactionManager">
    <property name="dataSource" ref="shardingDataSource"/>
  </bean>

  <!-- 拦截器方式配置事物 -->
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="append*" propagation="REQUIRED"/>
      <tx:method name="insert*" propagation="REQUIRED"/>
      <tx:method name="save*" propagation="REQUIRED"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="modify*" propagation="REQUIRED"/>
      <tx:method name="edit*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="remove*" propagation="REQUIRED"/>
      <tx:method name="repair" propagation="REQUIRED"/>
      <tx:method name="delAndRepair" propagation="REQUIRED"/>

      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="load*" propagation="SUPPORTS"/>
      <tx:method name="search*" propagation="SUPPORTS"/>

      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut expression="execution(* com.study.database.table.service..*Impl.*(..))" id="transactionPointcut"/>
    <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
  </aop:config>

</beans>