<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">


  <!-- 数据源配置, 使用 Druid 数据库连接池 通过 /druid 访问，用户名和密码一样-->
  <bean class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init" name="dataSource">
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="${jdbc.minPoolSize}"/>
    <property name="minIdle" value="${jdbc.minPoolSize}"/>
    <property name="maxActive" value="${jdbc.maxPoolSize}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${jdbc.maxIdleTime}"/>
    <!-- 这里建议配置为TRUE，防止取到的连接不可用。获取链接的时候，不校验是否可用，开启会有损性能-->
    <property name="testOnBorrow" value="true"/>
    <!-- 归还链接到连接池的时候校验链接是否可用 -->
    <property name="testOnReturn" value="false"/>
    <!-- 此项配置为true即可，不影响性能，并且保证安全性。意义为：申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
    <property name="testWhileIdle" value="true"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    <!-- 配置一个连接在池中最小生存的时间，单位毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="300000"/>
    <!-- 链接使用超过时间限制是否回收 -->
    <property name="removeAbandoned" value="true"/>
    <!-- 超过时间限制时间（单位秒），目前为5分钟，如果有业务处理时间超过5分钟，可以适当调整。 -->
    <property name="removeAbandonedTimeout" value="300"/>
    <!-- #链接回收的时候控制台打印信息，测试环境可以加上true，线上环境false。会影响性能。 -->
    <property name="logAbandoned" value="true"/>
    <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
    <property name="validationQuery" value="select 1 "/>
    <!-- 配置监控统计拦截的filters，用于在界面中统计sql和开启druid防火墙。注意： -->
    <!-- 监控中有jdbcSqlStat，原因是：com.alibaba.druid.statJdbcDataSourceStat中的createSqlStat方法中，
        用了一个map来存放所有的sql语句，这样会导致线上触发FullGC，可将此处注释掉 -->
    <property name="filters" value="wall,stat"/>
    <!-- 映射慢sql -->
    <property name="proxyFilters">
      <list>
        <ref bean="statfilter"/>
        <ref bean="logFilter"/>
      </list>
    </property>
  </bean>

  <!-- 慢SQL记录  -->
  <bean class="com.alibaba.druid.filter.stat.StatFilter" id="statfilter">
    <!-- 开启合并sql -->
    <property name="mergeSql" value="true"/>
    <!-- 开启慢查询语句,200毫秒 -->
    <property name="slowSqlMillis" value="200"/>
    <property name="logSlowSql" value="true"/>
  </bean>

  <!-- log4j2 -->
  <bean class="com.alibaba.druid.filter.logging.Log4j2Filter" id="logFilter">
    <!-- 所有连接相关的日志 -->
    <property name="connectionLogEnabled" value="false"/>
    <!-- 所有Statement相关的日志 -->
    <property name="statementLogEnabled" value="false"/>
    <!-- 是否显示结果集 -->
    <property name="resultSetLogEnabled" value="true"/>
    <!-- 是否显示SQL语句 -->
    <property name="statementExecutableSqlLogEnable" value="true"/>
  </bean>

  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    <!-- 以下配置可以配载 config中 -->
    <!-- 扫描entity包 使用别名 -->
    <!--<property name="typeAliasesPackage" value="com.study.spring.entity"/>-->
    <!-- 自动扫描mapping.xml文件 -->
    <!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>-->
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 可使用逗号分隔，或者分号 -->
    <property name="basePackage" value="com.study.spring.mapper"/>
    <!-- 这里指定了注解，只有是这个注解类，才会被扫描 -->
    <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    id="transactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 暴露AOP代理到ThreadLocal -->
  <aop:aspectj-autoproxy expose-proxy="true"/>
  <tx:annotation-driven/>
  <!--拦截器方式配置事物-->
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="append*" propagation="REQUIRED"/>
      <tx:method name="insert*" propagation="REQUIRED"/>
      <tx:method name="save*" propagation="REQUIRES_NEW"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="modify*" propagation="REQUIRED"/>
      <tx:method name="edit*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="remove*" propagation="REQUIRED"/>
      <tx:method name="repair" propagation="REQUIRED"/>
      <tx:method name="delAndRepair" propagation="REQUIRED"/>

      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="load*" propagation="SUPPORTS"/>
      <tx:method name="search*" propagation="SUPPORTS"/>

      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut expression="execution(* com.study.spring.service..*Impl.*(..))" id="transactionPointcut"/>
    <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
  </aop:config>


</beans>