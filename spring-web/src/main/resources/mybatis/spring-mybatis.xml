<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">


  <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" id="dataSource" destroy-method="close">
    <!-- 配置连接池属性 -->
    <property name="driverClass" value="${jdbc.driver}"/>
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <property name="user" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- c3p0连接池的私有属性 -->
    <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
    <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间,Default: 3 -->
    <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
    <!-- 关闭连接后不自动commit -->
    <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>
    <!-- 获取连接超时时间 -->
    <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
    <!-- 当获取连接失败重试次数 -->
    <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
  </bean>

  <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    <!-- 以下配置可以配载 config中 -->
    <!-- 扫描entity包 使用别名 -->
    <!--<property name="typeAliasesPackage" value="com.study.spring.entity"/>-->
    <!-- 自动扫描mapping.xml文件 -->
    <!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>-->
  </bean>

  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 可使用逗号分隔，或者分号 -->
    <property name="basePackage" value="com.study.spring.mapper"/>
    <!-- 这里指定了注解，只有是这个注解类，才会被扫描 -->
    <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    id="transactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 暴露AOP代理到ThreadLocal -->
  <aop:aspectj-autoproxy expose-proxy="true"/>
  <tx:annotation-driven/>
   <!--拦截器方式配置事物-->
  <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED"/>
      <tx:method name="append*" propagation="REQUIRED"/>
      <tx:method name="insert*" propagation="REQUIRED"/>
      <tx:method name="save*" propagation="REQUIRES_NEW"/>
      <tx:method name="update*" propagation="REQUIRED"/>
      <tx:method name="modify*" propagation="REQUIRED"/>
      <tx:method name="edit*" propagation="REQUIRED"/>
      <tx:method name="delete*" propagation="REQUIRED"/>
      <tx:method name="remove*" propagation="REQUIRED"/>
      <tx:method name="repair" propagation="REQUIRED"/>
      <tx:method name="delAndRepair" propagation="REQUIRED"/>

      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="load*" propagation="SUPPORTS"/>
      <tx:method name="search*" propagation="SUPPORTS"/>

      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>
  <aop:config>
    <aop:pointcut expression="execution(* com.study.spring.service..*Impl.*(..))" id="transactionPointcut"/>
    <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
  </aop:config>


</beans>